
@macro la %re, #label {
    lui %re, (#label >> 8)
    addi %re, (#label & 0xff)
}

@macro li %re, #imm {
    andi %re, 0
    addi %re, #imm
}

@macro push %reg {
    stw %reg, $sp(0)
    addi $sp, -1
}

@macro pop %reg {
    ldw %reg, $sp(1)
    addi $sp, 1
}

@macro putc %reg {
    mov $r1, %reg
    li $acc, 3
    int
}

@macro j #label {
    la $tmp, #label
    jmp $tmp
}

@macro beql %reg1, %reg2, #label {
    la $tmp, #label
    ceq %reg1, %reg2
    beq $tmp
}

@macro bnel %reg1, %reg2, #label {
    la $tmp, #label
    ceq %reg1, %reg2
    bne $tmp
}

@macro sub %reg1, %reg2 {
    la   $tmp, -1
    mult %reg2, $tmp
    add  %reg1, %reg2
}

.entry_point main

main:
    andi $r4, 0
.loop:
    la   $r1, 1208
    ldw  $r2, $r1(0)
    la   $r1, 1210
    ldw  $r3, $r1(0)
    beql $r2, $r3, .loop
    ldb  $r1, $r3(0)

    ; putc $r1
    li   $r2, '\n'
    bnel $r1, $r2, .put_char

.skip_line:
    li   $r5, 60
    div  $r4, $r5      ; ($r4 - $r4 % 60) + 60
    sub  $r4, $lo
    add  $r4, $r5
    j .advance_keyboard_queue

.put_char:
    stb  $r1, $r4(0)
    addi $r4, 1

.advance_keyboard_queue:
    mov  $r1, $r3
    andi $r1, 0b111
    addi $r1, 1
    andi $r1, 0b111
    la   $r2, 0b1111111111111000
    and  $r3, $r2
    add  $r3, $r1

    la   $r1, 1210
    stw  $r3, $r1(0)
    j .loop
    hlt
